name: Deploy Werewolf Visualization

on:
  # push:
  #   branches: [ main, master ]
  # pull_request:
  #   branches: [ main, master ]
  # schedule:
  workflow_dispatch:
    inputs:
      deploy_logs:
        description: 'Deploy with game logs'
        required: false
        default: 'true'
        type: boolean

env:
  PYTHON_VERSION: '3.10'
  NODE_VERSION: '18'

jobs:
  # Job 1: 整理和处理游戏日志
  prepare-logs:
    runs-on: ubuntu-latest
    outputs:
      logs-available: ${{ steps.check-logs.outputs.has-logs }}
      logs-count: ${{ steps.organize-logs.outputs.count }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Check for game logs and reviews
      id: check-logs
      run: |
        HAS_LOGS=false
        HAS_REVIEWS=false
        
        if [ -d ".training/game_logs" ] && [ "$(ls -A .training/game_logs)" ]; then
          HAS_LOGS=true
          echo "Found game logs directory with files"
        fi
        
        if [ -d ".training/reviews" ] && [ "$(ls -A .training/reviews)" ]; then
          HAS_REVIEWS=true
          echo "Found reviews directory with files"
        fi
        
        if [ "$HAS_LOGS" = true ] || [ "$HAS_REVIEWS" = true ]; then
          echo "has-logs=true" >> $GITHUB_OUTPUT
          echo "Processing logs and/or reviews"
        else
          echo "has-logs=false" >> $GITHUB_OUTPUT
          echo "No game logs or reviews found"
        fi
    
    - name: Install dependencies for log processing
      if: steps.check-logs.outputs.has-logs == 'true'
      run: |
        python -m pip install --upgrade pip
        pip install python-dateutil
    
    - name: Organize and filter game logs
      if: steps.check-logs.outputs.has-logs == 'true'
      id: organize-logs
      run: |
        python scripts/organize_logs.py
        echo "count=$(ls visualization/static/game_logs/ | wc -l)" >> $GITHUB_OUTPUT
    
    - name: Upload processed logs and reviews as artifact
      if: steps.check-logs.outputs.has-logs == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: processed-game-data
        path: |
          visualization/static/game_logs/
          visualization/static/source_files/
        retention-days: 30

  # Job 2: 构建和部署应用
  deploy:
    needs: prepare-logs
    runs-on: ubuntu-latest
    environment: 
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Download processed game data
      if: needs.prepare-logs.outputs.logs-available == 'true'
      uses: actions/download-artifact@v4
      with:
        name: processed-game-data
        path: visualization/static/
    
    - name: Install Python dependencies
      run: |
        cd visualization
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install gunicorn
    
    - name: Generate static files for GitHub Pages
      run: |
        cd visualization
        python generate_static_site.py
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
    
    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: visualization/dist/
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  # Job 3: 可选的Docker部署
  docker-deploy:
    needs: prepare-logs
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download processed game data
      if: needs.prepare-logs.outputs.logs-available == 'true'
      uses: actions/download-artifact@v4
      with:
        name: processed-game-data
        path: visualization/static/
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./visualization
        file: ./visualization/Dockerfile
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/werewolf-viz:latest
          ghcr.io/${{ github.repository }}/werewolf-viz:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max